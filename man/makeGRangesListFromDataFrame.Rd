% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeGRangesListFromDataFrame.R
\name{makeGRangesListFromDataFrame}
\alias{makeGRangesListFromDataFrame}
\title{Make a GRangesList object from a data.frame or DataFrame}
\usage{
makeGRangesListFromDataFrame(df, partitioning.field,
  keep.extra.columns = FALSE, ignore.strand = FALSE, seqinfo = NULL,
  seqnames.field = c("seqnames", "seqname", "chromosome", "chrom", "chr",
  "chromosome_name", "seqid"), start.field = "start", end.field = c("end",
  "stop"), strand.field = "strand", names.field = NULL,
  starts.in.df.are.0based = FALSE)
}
\arguments{
\item{df}{A \code{DataFrame} class object}

\item{partitioning.field}{Typically a \code{factor} vector that defines the
grouping order of the \code{DataFrame} rows}

\item{keep.extra.columns}{
    \code{TRUE} or \code{FALSE} (the default).
    If \code{TRUE}, the columns in \code{df} that are not used to form
    the genomic ranges of the returned \link{GRanges} object are then
    returned as metadata columns on the object. Otherwise, they are ignored.
    If \code{df} has a \code{width} column, then it's always ignored.
  }

\item{ignore.strand}{
    \code{TRUE} or \code{FALSE} (the default).
    If \code{TRUE}, then the strand of the returned \link{GRanges} object
    is set to \code{"*"}.
  }

\item{seqinfo}{
    Either \code{NULL}, or a \link{Seqinfo} object, or a character vector
    of seqlevels, or a named numeric vector of sequence lengths.
    When not \code{NULL}, it must be compatible with the genomic ranges
    in \code{df} i.e. it must include at least the sequence levels
    represented in \code{df}.
  }

\item{seqnames.field}{
    A character vector of recognized names for the column in \code{df}
    that contains the chromosome name (a.k.a. sequence name) associated
    with each genomic range.
    Only the first name in \code{seqnames.field} that is found
    in \code{colnames(df)} is used.
    If no one is found, then an error is raised.
  }

\item{start.field}{
    A character vector of recognized names for the column in \code{df}
    that contains the start positions of the genomic ranges.
    Only the first name in \code{start.field} that is found
    in \code{colnames(df)} is used.
    If no one is found, then an error is raised.
  }

\item{end.field}{
    A character vector of recognized names for the column in \code{df}
    that contains the end positions of the genomic ranges.
    Only the first name in \code{start.field} that is found
    in \code{colnames(df)} is used.
    If no one is found, then an error is raised.
  }

\item{strand.field}{
    A character vector of recognized names for the column in \code{df}
    that contains the strand associated with each genomic range.
    Only the first name in \code{strand.field} that is found
    in \code{colnames(df)} is used.
    If no one is found or if \code{ignore.strand} is \code{TRUE},
    then the strand of the returned \link{GRanges} object is
    set to \code{"*"}.
  }

\item{names.field}{A \code{character} vector designating the names for all
the ranges in the resulting \link{GRangesList}}

\item{starts.in.df.are.0based}{
    \code{TRUE} or \code{FALSE} (the default).
    If \code{TRUE}, then the start positions of the genomic ranges in
    \code{df} are considered to be \emph{0-based} and are converted to
    \emph{1-based} in the returned \link{GRanges} object.
    This feature is intended to make it more convenient to handle input
    that contains data obtained from resources using the "0-based
    start" convention. A notorious example of such resource is the UCSC
    Table Browser (\url{http://genome.ucsc.edu/cgi-bin/hgTables}).
  }
}
\description{
\code{makeGRangesListFromDataFrame} extends the
\link[GenomicRanges]{makeGRangesFromDataFrame} functionality from
\code{GenomicRanges}. It returns a \link{GRangesList} object.
}
\section{Value}{

A \linkS4class{GRangesList} class object.

Refer to the \link{makeGRangesFromDataFrame} documentation for more details.
}
\examples{
##----
## BASIC EXAMPLES
##----

df <- data.frame(chr="chr1", start=11:15, end=12:16,
                 strand=c("+","-","+","*","."), score=1:5,
                 specimen = c("a", "a", "b", "b", "c"),
                 gene_symbols = paste0("GENE", letters[1:5]))
df
makeGRangesListFromDataFrame(df, partitioning.field = "specimen",
                             names.field = "gene_symbols")

}

